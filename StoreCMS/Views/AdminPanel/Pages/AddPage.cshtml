@inject IPagesLocalization localization
@inject CMSDatabase db
@{
    Layout = "CommonPage";
    Context.Items["PageStyle"] = "/styles/admin_panel/pages/work_with_page.css";
    Context.Items["PageName"] = localization.AddPage_PageName;
    UsualPage[] pages = Context.Items["UsualPages"] as UsualPage[];
    Template[] templates = Context.Items["Templates"] as Template[];
}
<script src="/scripts/admin_panel/send_data.js"></script>
            <script src="/scripts/admin_panel/insert_tab.js"></script>
            <script src="/scripts/admin_panel/checkbox_event_handler.js"></script>
            <form id="add-page-form" class="page-container">
                @*SAVE BUTTON*@
                <input id="add-page-button" type="submit" value="@Html.Raw(localization.SaveButton)" />
                <div class="blocks">
                    <div class="left-block">
                        @*TITLE*@
                        <label for="Title">@Html.Raw(localization.Title)*</label>
                        <input type="text" id="Title" name="PageModel.Title" required />
                        @*BREADCRUMB*@
                        <label for="PageName">@Html.Raw(localization.Breadcrumb)*</label>
                        <input type="text" id="PageName" name="PageModel.PageName" required />
                        @*PAGE DESCRIPTION*@
                        <label for="PageDescription">@Html.Raw(localization.PageDescription)</label>
                        <input type="text" id="PageDescription" name="PageModel.PageDescription" maxlength="160">
                        @*PAGE KEYWORDS*@
                        <label for="PageKeywords">@Html.Raw(localization.PageKeywords)</label>
                        <input type="text" id="PageKeywords" name="PageModel.PageKeywords" />
                    </div>
                    <div class="right-block">
                        @*TEMPLATES LIST*@
                        <label for="TemplateId">@Html.Raw(localization.Template)</label>
                        <select id="TemplateId" name="PageModel.TemplateId">
                            <option selected>@Html.Raw(localization.WithoutTemplate)</option>
                            @foreach (var t in templates)
                            {
                            <option value="@t.ID">@Html.Raw(t.Name)</option>
                            }
                        </select>
                        @*PREVIOUS PAGE*@
                        <label for="PreviousPage">@Html.Raw(localization.PreviousPage)</label>
                        <select id="PreviousPage" name="PageModel.PreviousPageID">
                            <option selected>@Html.Raw(localization.WithoutPreviousPage)</option>
                        @foreach (var p in pages)
                        {
                            <option value="@p.ID">@Html.Raw(p.PageName)</option>
                        }
                        </select>
                        @*ALIAS*@
                        <label for="Alias">@Html.Raw(localization.Alias)</label>
                        <input type="text" id="Alias" name="PageModel.Alias" />
                        @*IS MAIN PAGE?*@
                        @if (!PagesManagementFunctions.HasMainPage(db))
                        {
                        <div class="checkbox-block">
                            <input type="checkbox" id="IsMainPage" name="PageModel.IsMainPage" value="false" />
                            <script>
                                let isMainPageCheckbox = document.getElementById('IsMainPage');
                                isMainPageCheckbox.addEventListener('click', checkboxEventHandler);
                            </script>
                            <label for="IsMainPage">@Html.Raw(localization.IsMainPage)</label>
                        </div>
                        }
                        @*PUBLISHED?*@
                        <div class="checkbox-block">
                            <input type="checkbox" id="Published" name="PageModel.Published" value="true" checked />
                            <script>
                                let publishedCheckbox = document.getElementById('Published');
                                publishedCheckbox.addEventListener('click', checkboxEventHandler);
                            </script>
                            <label for="Published">@Html.Raw(localization.Published)</label>
                        </div>
                        @*IS INDEX?*@
                        <div class="checkbox-block">
                            <input type="checkbox" id="IsIndex" name="PageModel.IsIndex" value="true" checked />
                            <script>
                                let isIndexCheckbox = document.getElementById('IsIndex');
                                isIndexCheckbox.addEventListener('click', checkboxEventHandler);
                            </script>
                            <label for="IsIndex">@Html.Raw(localization.IsIndex)</label>
                        </div>
                        @*IS FOLLOW?*@
                        <div class="checkbox-block">
                            <input type="checkbox" id="IsFollow" name="PageModel.IsFollow" value="true" checked />
                            <script>
                                let isFollowCheckbox = document.getElementById('IsFollow');
                                isFollowCheckbox.addEventListener('click', checkboxEventHandler);
                            </script>
                            <label for="IsFollow">@Html.Raw(localization.IsFollow)</label>
                        </div>
                    </div>
                </div>
                @*CONTENT*@
                <label for="Content">@Html.Raw(localization.Content)</label>
                <textarea id="Content" name="PageModel.Content"></textarea>
            </form>
            <script>
                function errorHandler(formElement) {
                    let errorMsg = document.createElement('span');
                    errorMsg.textContent = '@Html.Raw(localization.IncorrectInput)';
                    errorMsg.setAttribute('id', 'error-msg');
                    formElement.insertBefore(errorMsg, formElement.firstChild);
                }
                function successfulRequestHandler(request) {
                    alert('@Html.Raw(localization.PageAdded)');
                    location.replace(request.getResponseHeader('location'));
                }
                let addPageButton = document.getElementById('add-page-button');
                addPageButton.addEventListener('click', createSendDataEventHandler('POST', '?pageID=@((int)AdminPanelPages.AddPage)', 'add-page-form', successfulRequestHandler, errorHandler));
                let textarea = document.getElementById('Content');
                textarea.addEventListener('keydown', insertTabEventHandler);
            </script>